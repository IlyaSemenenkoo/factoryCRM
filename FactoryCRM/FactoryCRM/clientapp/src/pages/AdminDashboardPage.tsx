import { useEffect, useState } from "react";
import { getAllOrders, Order } from "../api/orders";
import { getAllUsers, User } from "../api/users";
import { OrderStatus, statusLabels } from "../constants/orderStatus";

export function AdminDashboardPage() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [users, setUsers] = useState<User[]>([]);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [ordersData, usersData] = await Promise.all([
        getAllOrders(),
        getAllUsers()
      ]);
      setOrders(ordersData);
      setUsers(usersData);
    } catch {
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ");
    }
  };

  // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
  const getStatusStats = () => {
    const result: Record<OrderStatus, number> = {
      0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0
    };
    for (const o of orders) {
      result[o.status as OrderStatus]++;

    }
    return result;
  };

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
  const getWorkerStats = () => {
    const result: Record<string, number> = {};
    for (const o of orders) {
      [o.assignedSewerId, o.assignedShoemakerId, o.assignedPackerId].forEach((id) => {
        if (id) result[id] = (result[id] || 0) + 1;
      });
    }
    return result;
  };

  // –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const overdueOrders = orders.filter(o => new Date(o.deadline) < new Date() && o.status < OrderStatus.Shipped);

  // –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
  const unassignedOrders = orders.filter(o =>
    !o.assignedSewerId || !o.assignedShoemakerId || !o.assignedPackerId
  );

  const statusStats = getStatusStats();
  const workerStats = getWorkerStats();

  const findUserName = (id: string | undefined | null) =>
    users.find(u => u.id === id)?.fullName || "‚Äî";

  return (
    <div style={{ padding: "20px" }}>
      <h1>üìä –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>

      <section>
        <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö</h2>
        <ul>
          {Object.entries(statusStats).map(([key, count]) => (
            <li key={key}>
              {statusLabels[+key as OrderStatus]}: {count}
            </li>
          ))}
        </ul>
      </section>

      <hr />

      <section>
        <h2>–ó–∞–¥–∞—á—ñ –ø–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞—Ö</h2>
        <ul>
          {Object.entries(workerStats).map(([userId, count]) => (
            <li key={userId}>
              üë§ {findUserName(userId)} ‚Äî {count} –∑–∞–¥–∞—á(—ñ)
            </li>
          ))}
        </ul>
      </section>

      <hr />

      <section>
        <h2>‚ùó –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
        {overdueOrders.length === 0 ? (
          <p>–ù–µ–º–∞—î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å</p>
        ) : (
          <ul>
            {overdueOrders.map(o => (
              <li key={o.id}>
                {o.description} ‚Äî –¥–µ–¥–ª–∞–π–Ω: {new Date(o.deadline).toLocaleDateString()}
              </li>
            ))}
          </ul>
        )}
      </section>

      <hr />

      <section>
        <h2>‚ö†Ô∏è –ù–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
        {unassignedOrders.length === 0 ? (
          <p>–£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—é—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤</p>
        ) : (
          <ul>
            {unassignedOrders.map(o => (
              <li key={o.id}>
                {o.description} ‚Äî{" "}
                {[
                  !o.assignedSewerId && "–Ω–µ–º–∞—î —à–≤–∞—á–∫–∏",
                  !o.assignedShoemakerId && "–Ω–µ–º–∞—î —Å–∞–ø–æ–∂–Ω–∏–∫–∞",
                  !o.assignedPackerId && "–Ω–µ–º–∞—î —É–ø–∞–∫–æ–≤–Ω–∏–∫–∞"
                ].filter(Boolean).join(", ")}
              </li>
            ))}
          </ul>
        )}
      </section>
    </div>
  );
}
